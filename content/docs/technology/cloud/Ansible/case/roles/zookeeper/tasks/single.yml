---
#file: single.yml
- name: Check zookeeper user exists
  stat: path=/home/zookeeper
  register: zu

- name: Create the group zookeeper
  group: name=zookeeper state=present
  when: zu.stat.exists == false

- name: Create the user zookeeper
  user: name=zookeeper group=zookeeper
  when: zu.stat.exists == false

- name: Check {{ work_dir }} directory exists
  stat: path={{ work_dir }}
  register: wd

- name: Create directory when {{ work_dir }} directory not exists
  file: path={{ work_dir }} state=directory mode=0755
  when: wd.stat.exists == false

- name: Check zookeepr command exists
  stat: path={{ work_dir }}/zookeeper-{{ zk_version }}/bin/zkServer.sh
  register: zc

- name: Copy zookeeper compress file to remote server
  copy: src=zookeeper-{{ zk_version }}.tar.gz dest=/usr/local/src
  when: zc.stat.exists == false

- name: Uncompress zookeeper-{{ zk_version }}.tar.gz
  unarchive: src=/usr/local/src/zookeeper-{{ zk_version }}.tar.gz dest={{ work_dir }}/ remote_src=yes
  when: zc.stat.exists == false

- name: Create zookeeper data directory
  file: path={{ item }} state=directory mode=0755
  with_items:
    - "{{ dirs['zookeeper'] }}"

- name: Generate zookeeper configuration file
  template: src={{ item }} dest=/etc/zookeeper/
  with_items:
    - log4j.properties
    - configuration.xsl

- name: Generate zoo.cfg file
  template: src=zoo.cfg.single dest=/etc/zookeeper/zoo.cfg
  
- name: Generate zkEnv.sh file
  template: src=zkEnv.sh dest={{ work_dir }}/zookeeper-{{ zk_version }}/bin/ mode=0755

- name: Generate zk.sh file
  template: src=zk.sh dest=/etc/init.d/ mode=0755

- name: Change owner for zookeeper data directory
  file: path={{ item }} owner=zookeeper group=zookeeper recurse=yes
  with_items:
    - "{{ dirs['zookeeper'] }}"

- name: Start zookeeper service
  shell: /etc/init.d/zk.sh start
