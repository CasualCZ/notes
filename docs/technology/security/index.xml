<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全 on CC Notes</title>
    <link>https://cctrip.github.io/notes/docs/technology/security/</link>
    <description>Recent content in 安全 on CC Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://cctrip.github.io/notes/docs/technology/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://cctrip.github.io/notes/docs/technology/security/Basic/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/security/Basic/README/</guid>
      <description>安全基础 #  密码学 #  密码学处理数字和字符串。
哈希 #  哈希散列是一项密码学技术，它将数据转换成其他形式，并且不可恢复。
加解密 #  加解密是一个双向过程，当且仅当加密密钥被知道时才能检索原始数据。
对称加密 #  对称加密使用同一个密钥
非对称加密 #  非对称加密使用公私钥，私钥自己持有，公钥给所有想加密信息发送给你的人。使用公钥加密，使用私钥解密。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cctrip.github.io/notes/docs/technology/security/Firewall/firewalld/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/security/Firewall/firewalld/</guid>
      <description>Firewalld #  firewalld是CentOS7默认的防火墙服务，用于管理网络数据包的流动和转发。
 基础命令 #    启动
 $ systemctl start firewalld.service    查看状态
 $ systemctl status firewalld.service    关闭
 $ systemctl stop firewalld.service    开启和关闭开机启动
 $ systemctl enable firewalld.service $ systemctl disable firewalld.service    Rule配置：firewall-cmd命令
   Options Description     -h, &amp;ndash;help Prints a short help text and exists   -V, &amp;ndash;version Print the version string of firewalld   -q, &amp;ndash;quiet Do not print status messages   &amp;ndash;state Return and print firewalld state   &amp;ndash;reload Reload firewall and keep state information   &amp;ndash;complete-reload Reload firewall and loose state information   &amp;ndash;runtime-to-permanent Create permanent from runtime configuration   &amp;ndash;permanent Set an option permanently   &amp;ndash;zone=&amp;lt;zone&amp;gt; Use this zone to set or query options, else default zone   &amp;ndash;timeout=&amp;lt;timeval&amp;gt; Enable an option for timeval time, where timeval is,a number followed by one of letters &amp;rsquo;s&amp;rsquo; or &amp;rsquo;m&amp;rsquo; or &amp;lsquo;h&amp;rsquo;       概念 #  区域(Zones) #  一个规则管理群组的概念，定义了可信任级别。其中预先定义的zones有以下几个：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cctrip.github.io/notes/docs/technology/security/Firewall/iptables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/security/Firewall/iptables/</guid>
      <description>Iptables #  iptables：一个运行在用户空间的应用软件，通过控制Linux内核netfilter模块，来管理网络数据包的流动与转送。
Netfilter：Linux操作系统核心层内部的一个数据包处理模块，它具有如下功能：
  网络地址转换(Network Address Translate)
  数据包内容修改
  数据包过滤
  Netfilter的配置表：存放设置的规则的文件，存放在内核内存中。iptables程序通过修改这个规则文件来控制网络数据包流动。 该配置表由表tables、链chains、规则rules组成。
 Netfilter配置表 #  表(tables) #  用于实现特定的功能
  raw表
主要用于决定数据包是否被状态跟踪机制处理。在匹配数据包时，raw表的规则要优先于其他表。包含两条规则链 OUTPUT、PREROUTING。
iptables中数据包和4种被跟踪连接的4种不同状态：
 NEW：该包想要开始一个连接（重新连接或将连接重定向） RELATED：该包是属于某个已经建立的连接所建立的新连接。 ESTABLISHED ：只要发送并接到应答，一个数据连接从NEW变为ESTABLISHED,而且该状态会继续匹配这个连接的后续数据包。 INVALID：数据包不能被识别属于哪个连接或没有任何状态比如内存溢出，收到不知属于哪个连接的ICMP错误信息，一般应该DROP这个状态的任何数据。    mangle表
主要用于修改数据包的TOS（Type Of Service，服务类型）、TTL（Time To Live，生存周期）指以及为数据包设置Mark标记，以实现Qos(Quality Of Service，服务质量)调整以及策略路由等应用，由于需要相应的路由设备支持，因此应用并不广泛。包含五个规则链——PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD。
  nat表
主要用于修改数据包的IP地址、端口号等信息（网络地址转换，如SNAT、DNAT、MASQUERADE、REDIRECT）。属于一个流的包(因为包 的大小限制导致数据可能会被分成多个数据包)只会经过这个表一次。如果第一个包被允许做NAT或Masqueraded，那么余下的包都会自动地被做相同的操作，也就是说，余下的包不会再通过这个表。
表对应的内核模块为 iptable_nat，包含三个链：
 PREROUTING链：作用是在包刚刚到达防火墙时改变它的目的地址 OUTPUT链：改变本地产生的包的目的地址 POSTROUTING链：在包就要离开防火墙之前改变其源地址    filter表
主要用于对数据包进行过滤，根据具体的规则决定是否放行该数据包（如DROP、ACCEPT、REJECT、LOG）。filter 表对应的内核模块为iptable_filter，包含三个规则链：
 INPUT链：INPUT针对那些目的地是本地的包 FORWARD链：FORWARD过滤所有不是本地产生的并且目的地不是本地(即本机只是负责转发)的包 OUTPUT链：OUTPUT是用来过滤所有本地生成的包    链(chains) #  在处理各种数据包时，根据防火墙规则的不同介入时机，iptables供涉及5种默认规则链，从应用时间点的角度理解这些链：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cctrip.github.io/notes/docs/technology/security/Firewall/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/security/Firewall/README/</guid>
      <description>防火墙 #  工作在主机或网络边缘，对进出的报文按事先定义的规则进行检查，并且由匹配到的规则进行处理的一组硬件或软件，甚至可能是二者的结合。
 Linux防火墙 #     iptables
   firewalld
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cctrip.github.io/notes/docs/technology/security/IDS/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/security/IDS/README/</guid>
      <description>IDS #  入侵检测系统
 HIDS #  OSSEC
NIDS #  snort
Firesystem #  tripware</description>
    </item>
    
    <item>
      <title></title>
      <link>https://cctrip.github.io/notes/docs/technology/security/IDS/Snort/snort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/security/IDS/Snort/snort/</guid>
      <description>Snort #  #  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://cctrip.github.io/notes/docs/technology/security/TLS/ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cctrip.github.io/notes/docs/technology/security/TLS/ssl/</guid>
      <description>SSL协议 #  SSL是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。
   SSL介绍
   工作机制
   工具使用
   SSL介绍 一个简单的工作流程: #    浏览器请求一个安全页面(https://)。
  Web服务器返回公钥及其证书。
  浏览器检查该证书是否由可信任的机构颁发，并且是与站点相关的有效证书。
  浏览器使用公钥加密随即对称加密密钥，和通过随即加密密钥加密的http数据一同发送给Web服务器。
  Web服务器通过私钥解密随即对称加密密钥，并使用它解密http数据。
  Web服务器返回通过随即对称加密密钥加密的请求html文本和http数据。
  浏览器通过随即对称加密密钥解密html文本和http数据并展示信息。
   公私钥: #  非对称加密，使用私钥/公钥对加密，数据可以被一个密钥加密，但只能被另一个密钥对解密。该密钥对自己保留一个私钥，并将公钥分配给每个人。
Message --&amp;gt; [Public Key] --&amp;gt; Encrypted Message --&amp;gt; [Private Key] --&amp;gt; Message   证书: #  证书加载在浏览器或者其他客户端党当中，证书包含了证书所有者的信息。一个例子:
Certificate: Data: Version: 3 (0x2) Serial Number: 1 (0x1) Signature Algorithm: md5WithRSAEncryption Issuer: C=FJ, ST=Fiji, L=Suva, O=SOPAC, OU=ICT, CN=SOPAC Root CA/Email=administrator@sopac.</description>
    </item>
    
  </channel>
</rss>